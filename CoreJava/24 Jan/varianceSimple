import java.util.ArrayList;
import java.util.List;

class Employee {
    String name;

    Employee(String name) {
        this.name = name;
    }

    void work() {
        System.out.println(name + " is working");
    }
}

//subclass of Employee
class Intern extends Employee {
    Intern(String name) {
        super(name);
    }
    //subclass of Employee
    void work() {
        System.out.println(name + " is interning");
    }
}
//subclass of Employee
class InternTrainer extends Employee {
    InternTrainer(String name) {
        super(name);
    }

    void work() {
        System.out.println(name + " is training interns");
    }
}

//subclass of Employee
class CEO extends Employee {
    CEO(String name) {
        super(name);
    }

    void work() {
        System.out.println(name + " is managing the company");
    }
}

public class Main {
    public static void main(String[] args) {
        //Covariance
        List<? extends Employee> covariantList = new ArrayList<Intern>();
        for (Employee employee : covariantList) {
            employee.work(); //This is a read-only list
        }

        // Contravariance
        // contravariant list of InternTrainer can add an Intern
        // You can write to this list, but not read specific types from it (except Object)
        List<? super Intern> contravariantList = new ArrayList<InternTrainer>();
        contravariantList.add(new Intern("John Doe")); 
        

        // Invariant
        List<CEO> invariantList = new ArrayList<CEO>();
        invariantList.add(new CEO("Jane Smith"));
        for (CEO ceo : invariantList) {
            ceo.work();
        }
    }
}
